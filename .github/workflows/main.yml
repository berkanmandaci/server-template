name: Nakama Server CI/CD

on:
  push:
    branches: [ master, dev ]
  workflow_dispatch: # Manuel tetiklemeyi etkinleştirir
    inputs:
      service:
        description: 'Deploy edilecek servis (örnek: flask-runner)'
        required: true
        default: 'flask-runner'

env: {}

jobs:
  test:
    # test job'ı push/pull_request veya fast-deploy tarafından çağrılabilir hale gelecek
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          if ! command -v docker compose &> /dev/null
          then
              echo "docker compose not found, installing..."
              sudo apt-get update && sudo apt-get install -y docker-compose-plugin
          else
              echo "docker compose is already installed."
          fi

      - name: Create Traefik Public Network
        run: docker network create traefik-public || true

      - name: Build Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          outputs: type=docker,name=berkanmandaci/nakama-server:test-${{ github.sha }},push=false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: |
          docker compose run --rm flask-runner python -m pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Sadece push master olduğunda build ve push yap
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Nakama image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: berkanmandaci/nakama-server:${{ github.sha }},berkanmandaci/nakama-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Flask image
        uses: docker/build-push-action@v4
        with:
          context: ./flask-runner
          push: true
          tags: berkanmandaci/flask-runner:${{ github.sha }},berkanmandaci/flask-runner:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    needs: build-and-push # Build ve push tamamlandıktan sonra çalışır
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # Sadece master branch'ine push yapıldığında tarama yap
    steps:
      - uses: actions/checkout@v3

      # Python Bağımlılık Taraması (pip-audit)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Flask uygulamanızın Python versiyonuna göre ayarlayın

      - name: Install Python dependencies
        run: pip install -r flask-runner/requirements.txt

      - name: Run pip-audit
        run: | # pip-audit 1 veya daha fazla zafiyet bulursa hata verir
          pip install pip-audit==2.7.0
          pip-audit --fail-on-any # --verbose # Detaylı çıktı için verbose ekleyebilirsiniz

      # Container İmajı Taraması (Trivy)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/berkanmandaci/flask-runner:latest' # Taranacak imaj (kendi kullanıcı adınızla güncelleyin)
          format: 'table'
          exit-code: '1' # Zafiyet bulunursa job'ı başarısız yap
          ignore-unfixed: true # Fixi olmayan zafiyetleri görmezden gel
          vuln-type: 'os,library'

  deploy:
    needs: security-scan # Deploy, güvenlik taraması başarılı olursa çalışır
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Sadece push master olduğunda deploy yap
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            cd /home/ubuntu/server-template
            git pull origin master
            docker compose up -d --build

  fast-deploy:
    needs: test # fast-deploy de testlere bağımlı olacak
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' # Sadece manuel tetiklendiğinde çalış
    steps:
      - uses: actions/checkout@v3

      - name: Deploy specific service to Oracle Cloud
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ${{ secrets.ORACLE_USERNAME }}
          key: ${{ secrets.ORACLE_SSH_KEY }}
          script: |
            cd /home/ubuntu/server-template
            git pull origin master
            docker compose stop ${{ github.event.inputs.service }} || true
            docker compose rm -f ${{ github.event.inputs.service }} || true
            docker compose up -d --build ${{ github.event.inputs.service }} 